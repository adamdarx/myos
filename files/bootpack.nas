[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_sprintf
	EXTERN	_io_hlt
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_font
	EXTERN	_load_gdtr
	EXTERN	_load_idtr
[FILE "bootpack.c"]
[SECTION .data]
LC0:
	DB	"(%d, %d)",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,72
	CALL	_init_palette
	MOVSX	EBX,WORD [4086]
	MOVSX	EAX,WORD [4084]
	MOV	DWORD [-72+EBP],EAX
	MOV	EAX,DWORD [4088]
	MOV	DWORD [-64+EBP],EAX
	MOV	ESI,DWORD [-72+EBP]
	LEA	EAX,DWORD [-29+EBX]
	DEC	ESI
	PUSH	EAX
	PUSH	ESI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-28+EBX]
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-27+EBX]
	ADD	ESP,56
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-1+EBX]
	PUSH	EAX
	LEA	EAX,DWORD [-26+EBX]
	PUSH	ESI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-24+EBX]
	ADD	ESP,56
	MOV	DWORD [-76+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	3
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-4+EBX]
	PUSH	EAX
	MOV	DWORD [-80+EBP],EAX
	PUSH	2
	PUSH	DWORD [-76+EBP]
	PUSH	2
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	ADD	ESP,56
	PUSH	DWORD [-80+EBP]
	PUSH	59
	PUSH	DWORD [-80+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	LEA	EAX,DWORD [-5+EBX]
	PUSH	EAX
	LEA	EAX,DWORD [-23+EBX]
	PUSH	59
	MOV	DWORD [-84+EBP],EAX
	PUSH	EAX
	SUB	EBX,3
	PUSH	59
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	ADD	ESP,56
	PUSH	EBX
	PUSH	59
	PUSH	EBX
	PUSH	2
	PUSH	0
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	PUSH	EBX
	PUSH	60
	PUSH	DWORD [-76+EBP]
	PUSH	60
	PUSH	0
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	MOV	ESI,DWORD [-72+EBP]
	ADD	ESP,56
	MOV	EDI,DWORD [-72+EBP]
	PUSH	DWORD [-76+EBP]
	SUB	EDI,4
	SUB	ESI,47
	PUSH	EDI
	PUSH	DWORD [-76+EBP]
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	PUSH	DWORD [-80+EBP]
	PUSH	ESI
	PUSH	DWORD [-84+EBP]
	PUSH	ESI
	PUSH	15
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	ADD	ESP,56
	PUSH	EBX
	PUSH	EDI
	PUSH	EBX
	PUSH	ESI
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	MOV	EAX,DWORD [-72+EBP]
	PUSH	EBX
	SUB	EAX,3
	PUSH	EAX
	LEA	EBX,DWORD [-60+EBP]
	PUSH	DWORD [-76+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_draw_rectangle
	ADD	ESP,56
	PUSH	78
	PUSH	152
	PUSH	LC0
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	7
	PUSH	8
	PUSH	8
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_putfont8_str
	ADD	ESP,40
	PUSH	14
	PUSH	DWORD [-68+EBP]
	CALL	_init_mouse_cursor8
	PUSH	16
	PUSH	DWORD [-68+EBP]
	PUSH	78
	PUSH	152
	PUSH	16
	PUSH	16
	PUSH	DWORD [-72+EBP]
	PUSH	DWORD [-64+EBP]
	CALL	_putblock8_8
	ADD	ESP,40
L5:
	CALL	_io_hlt
	JMP	L5
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	EBX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_io_load_eflags
	MOV	DWORD [-16+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,EDI
	POP	EAX
	POP	EDX
	JLE	L12
L14:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L12:
	MOV	AL,BYTE [ESI]
	INC	EBX
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [1+ESI]
	SHR	AL,2
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOV	AL,BYTE [2+ESI]
	SHR	AL,2
	ADD	ESI,3
	MOVZX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	EBX,EDI
	JLE	L12
	JMP	L14
	GLOBAL	_draw_rectangle
_draw_rectangle:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	EDI,DWORD [28+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ESI,DWORD [32+EBP]
	CMP	EBX,EDI
	JG	L27
L25:
	MOV	ECX,DWORD [24+EBP]
	CMP	ECX,ESI
	JG	L29
	MOV	EAX,DWORD [12+EBP]
	MOV	EDX,DWORD [8+EBP]
	IMUL	EAX,ECX
	ADD	EDX,EBX
	MOV	DWORD [-20+EBP],EAX
	ADD	EAX,EDX
L24:
	MOV	DL,BYTE [16+EBP]
	INC	ECX
	MOV	BYTE [EAX],DL
	ADD	EAX,DWORD [12+EBP]
	CMP	ECX,ESI
	JLE	L24
L29:
	INC	EBX
	CMP	EBX,EDI
	JLE	L25
L27:
	POP	EBX
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	ECX
	PUSH	ECX
	MOV	AL,BYTE [24+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	BYTE [-17+EBP],AL
L43:
	MOV	ECX,DWORD [28+EBP]
	MOV	DL,BYTE [EBX+ECX*1]
	TEST	DL,DL
	JNS	L35
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [EAX+ESI*1],CL
L35:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L36
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [1+EAX+ESI*1],CL
L36:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L37
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [2+EAX+ESI*1],CL
L37:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L38
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [3+EAX+ESI*1],CL
L38:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L39
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [4+EAX+ESI*1],CL
L39:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L40
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [5+EAX+ESI*1],CL
L40:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L41
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [6+EAX+ESI*1],CL
L41:
	AND	EDX,1
	TEST	DL,DL
	JE	L33
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	DL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [7+EAX+ECX*1],DL
L33:
	INC	EBX
	CMP	EBX,15
	JLE	L43
	POP	EAX
	POP	EDX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_putfont8_str
_putfont8_str:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	PUSH	EBX
	MOV	ESI,DWORD [28+EBP]
	MOV	AL,BYTE [24+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	EBX,DWORD [16+EBP]
	MOV	EDI,DWORD [20+EBP]
	CMP	BYTE [ESI],0
	JNE	L52
L54:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L52:
	MOVZX	EAX,BYTE [ESI]
	SAL	EAX,4
	ADD	EAX,_font
	PUSH	EAX
	MOVSX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	EBX
	ADD	EBX,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,24
	CMP	EBX,DWORD [12+EBP]
	JL	L49
	MOV	EAX,EBX
	MOV	ECX,320
	CDQ
	IDIV	ECX
	ADD	EDI,16
	MOV	EBX,EDX
L49:
	INC	ESI
	CMP	BYTE [ESI],0
	JNE	L52
	JMP	L54
[SECTION .data]
_cursor.1:
	DB	"**************.."
	DB	"*OOOOOOOOOOO*..."
	DB	"*OOOOOOOOOO*...."
	DB	"*OOOOOOOOO*....."
	DB	"*OOOOOOOO*......"
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOOO*......"
	DB	"*OOOO**OOO*....."
	DB	"*OOO*..*OOO*...."
	DB	"*OO*....*OOO*..."
	DB	"*O*......*OOO*.."
	DB	"**........*OOO*."
	DB	"*..........*OOO*"
	DB	"............*OO*"
	DB	".............***"
[SECTION .text]
	GLOBAL	_init_mouse_cursor8
_init_mouse_cursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	EDI
	XOR	EDI,EDI
	MOV	AL,BYTE [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L68:
	XOR	EDX,EDX
L67:
	LEA	EAX,DWORD [EDX+EDI*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L73
L64:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L74
L65:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L75
L62:
	INC	EDX
	CMP	EDX,15
	JLE	L67
	INC	EBX
	ADD	EDI,16
	CMP	EBX,15
	JLE	L68
	POP	ESI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L75:
	MOV	CL,BYTE [-13+EBP]
	MOV	BYTE [EAX+ESI*1],CL
	JMP	L62
L74:
	MOV	BYTE [EAX+ESI*1],7
	JMP	L65
L73:
	MOV	BYTE [EAX+ESI*1],0
	JMP	L64
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	ESI,DWORD [20+EBP]
	JGE	L88
	XOR	EDI,EDI
L86:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L90
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,EDI
	MOV	DWORD [-20+EBP],EAX
L85:
	MOV	EAX,DWORD [28+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EAX,ESI
	ADD	EDX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDX
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	INC	EBX
	MOV	DL,BYTE [EDX]
	MOV	BYTE [EAX+ECX*1],DL
	INC	DWORD [-20+EBP]
	CMP	EBX,DWORD [16+EBP]
	JL	L85
L90:
	INC	ESI
	ADD	EDI,DWORD [36+EBP]
	CMP	ESI,DWORD [20+EBP]
	JL	L86
L88:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_gdtidt
_init_gdtidt:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L96:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_segmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L96
	PUSH	16530
	MOV	ESI,2553856
	PUSH	0
	MOV	EBX,255
	PUSH	-1
	PUSH	2555912
	CALL	_set_segmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_set_segmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_load_gdtr
	POP	EAX
	POP	EDX
L101:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_gatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L101
	PUSH	2553856
	PUSH	2047
	CALL	_load_idtr
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_segmdesc
_set_segmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,1048575
	JBE	L107
	SHR	EDX,12
	OR	EAX,32768
L107:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_set_gatedesc
_set_gatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	SAR	ECX,16
	MOV	BYTE [4+EDX],AL
	MOV	WORD [6+EDX],CX
	POP	EBX
	POP	EBP
	RET
